{"version":3,"file":"aimapi.min.js","sources":["../src/aimConf.js","../utils/modality.js","../utils/aid.js","../src/Aim.jsx","../src/aimHelper.js"],"sourcesContent":["export default {\n  aimVersion: \"AIMv4_2\",\n  \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n  \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n  xmlns: \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM\",\n  \"xsi:schemaLocation\":\n    \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM AIM_v4.2_rv2_XML.xsd\"\n};\n","var dcmDesignator = \"DCM\";\nvar lexVersion = \"20121129\";\n//from the link below\n//http://dicom.nema.org/medical/dicom/current/output/chtml/part16/sect_CID_29.html\n//http://www.dicomlibrary.com/dicom/sop/\n\n//Default Values=> codeValue:99EPADM0 codeMaeaning:NA codingSchemeDesignator:99EPAD\n\nexport var modalities = {\n  \"1.2.840.10008.5.1.4.1.1.2\": {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1\": {\n    codeValue: \"CR\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.128\": {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.4\": {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.6.1\": {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2.1\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  CT: {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  CR: {\n    codeValue: \"CR\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  PT: {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  MR: {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  US: {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  MG: {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  }\n};\n","/**\n * For creating DICOM uids\n * Taken from dcmjs MetaDictionary\n * https://github.com/dcmjs-org/dcmjs/blob/master/src/DicomMetaDictionary.js#L5\n */\nexport function generateUid() {\n  let uid = \"2.25.\" + Math.floor(1 + Math.random() * 9);\n  for (let index = 0; index < 38; index++) {\n    uid = uid + Math.floor(Math.random() * 10);\n  }\n  return uid;\n}\n\nexport function persistExpandView(expanded, data, newData, id) {\n  const expandMap = {};\n  let counter = 0;\n  newData.forEach((el, i) => {\n    if (counter < data.length) {\n      if (el[id] === data[counter][id]) {\n        expandMap[i] = expanded[counter];\n        counter += 1;\n      } else {\n        expandMap[i] = false;\n      }\n    }\n  });\n  return expandMap;\n}\n","import aimConf from \"./aimConf\";\nimport { modalities } from \"../utils/modality\";\nimport { generateUid } from \"../utils/aid\";\n\nclass Aim {\n  constructor(imageData, aimType, updatedAimId) {\n    this.temp = {};\n    ({\n      aim: this.temp.aim,\n      study: this.temp.study,\n      series: this.temp.series,\n      image: this.temp.image,\n      segmentation: this.temp.segmentation,\n      equipment: this.temp.equipment,\n      user: this.temp.user,\n      person: this.temp.person,\n    } = imageData);\n    this.xmlns = aimConf.xmlns;\n    this[\"xmlns:rdf\"] = aimConf[\"xmlns:rdf\"];\n    this[\"xmlns:xsi\"] = aimConf[\"xmlns:xsi\"];\n    this.aimVersion = aimConf.aimVersion;\n    this[\"xsi:schemaLocation\"] = aimConf[\"xsi:schemaLocation\"];\n    this.uniqueIdentifier = \"\";\n    this.studyInstanceUid = { root: this.temp.aim.studyInstanceUid };\n    this.seriesInstanceUid = { root: generateUid() };\n    this.accessionNumber = { value: this.temp.study.accessionNumber };\n    this.dateTime = { value: this.getDate() };\n    this.user = this._createUser(this.temp.user);\n    this.equipment = this._createEquipment(this.temp.equipment);\n    this.person = this._createPerson(this.temp.person);\n    this.imageAnnotations = {\n      ImageAnnotation: [this._createImageAnnotations(aimType)],\n    };\n    if (updatedAimId === undefined)\n      this.uniqueIdentifier = { root: generateUid() };\n    else this.uniqueIdentifier = { root: updatedAimId };\n  }\n\n  static parse(data) {\n    return new Aim(data);\n  }\n\n  // static getMarkups(aim) {\n  //   let annotations = [];\n  //   let annotation = {};\n  //   const markupEntities =\n  //     aim.imageAnnotations.ImageAnnotation.markupEntityCollection.MarkupEntity;\n\n  //   if (markupEntities.constructor === Array) {\n  //     markupEntities.map(markupEntity => {\n  //       var imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  //       var markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  //       var calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //       annotations.push({\n  //         imageId: imageId,\n  //         markupType: markupEntity[\"xsi:type\"],\n  //         coordinates:\n  //           markupEntity.twoDimensionSpatialCoordinateCollection\n  //             .TwoDimensionSpatialCoordinate,\n  //         calculations: calculations\n  //       });\n  //       this.getCalculationEntitiesOfMarkUp(aim);\n  //     });\n  //     return annotations;\n  //   } else if (\n  //     Object.entries(markupEntities).length !== 0 &&\n  //     markupEntities.constructor === Object\n  //   ) {\n  //     const imageId = markupEntities[\"imageReferenceUid\"][\"root\"];\n  //     const markupUid = markupEntities[\"uniqueIdentifier\"][\"root\"];\n  //     const calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //     return {\n  //       imageId: imageId,\n  //       markupType: markupEntities[\"xsi:type\"],\n  //       coordinates:\n  //         markupEntities.twoDimensionSpatialCoordinateCollection\n  //           .TwoDimensionSpatialCoordinate,\n  //       calculations: calculations\n  //     };\n  //   }\n  // }\n\n  getDate = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + now.getDate()).slice(-2);\n    const hours = (\"0\" + now.getHours()).slice(-2);\n    const minutes = (\"0\" + now.getMinutes()).slice(-2);\n    const seconds = (\"0\" + now.getSeconds()).slice(-2);\n    return year + month + day + hours + minutes + seconds;\n  };\n\n  _createObject = (name, value) => {\n    var obj = {};\n    obj[name] = { value };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Calculation Entitiy Realted Functions   */\n  /*                                          */\n\n  _createDimension = (label, index = 0, size = 1) => {\n    return {\n      Dimension: [\n        Object.assign(\n          {},\n          this._createObject(\"index\", index),\n          this._createObject(\"size\", size),\n          this._createObject(\"label\", label)\n        ),\n      ],\n    };\n  };\n\n  _createDoubleDataType = () => {\n    var obj = {\n      dataType: {\n        code: \"C48870\",\n        codeSystem: \"NCI\",\n        \"iso:displayName\": {\n          \"xmlns:iso\": \"uri:iso.org:21090\",\n          value: \"Double\",\n        },\n      },\n    };\n    return obj;\n  };\n\n  //preLabel is used for preceding the name like LongAxis || ShortAxis\n  _createCalcResult = (unit, label, value, preLabel = \"\") => {\n    var obj = this._createObject(\"unitOfMeasure\", unit);\n    Object.assign(obj, this._createDoubleDataType());\n    obj[\"xsi:type\"] = \"CompactCalculationResult\";\n    obj[\"dimensionCollection\"] = this._createDimension(preLabel + label);\n    obj[\"type\"] = \"Scalar\";\n    Object.assign(obj, this._createObject(\"value\", `${value}`));\n    return obj;\n  };\n\n  //if called with the default values returns DCM type code\n  _createTypeCode = (\n    code = \"11203\",\n    codeSystemName = \"DCM\",\n    displayNameValue = \"Attenuation Coefficient\"\n  ) => {\n    var obj = {};\n    obj[\"code\"] = code;\n    obj[\"codeSystemName\"] = codeSystemName;\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: displayNameValue,\n    };\n    return obj;\n  };\n\n  createLengthCalcEntity = (length) => {\n    const { unit, value } = length;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-D7FE\", \"SRT\", \"Length\")];\n    obj[\"description\"] = { value: \"Length\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LineLength\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createLongAxisCalcEntity = (longAxis) => {\n    const { unit, value } = longAxis;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A185\", \"SRT\", \"LongAxis\")];\n    obj[\"description\"] = { value: \"LongAxis\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LongAxis\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createShortAxisCalcEntity = (shortAxis) => {\n    const { unit, value } = shortAxis;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A186\", \"SRT\", \"ShortAxis\")];\n    obj[\"description\"] = { value: \"ShortAxis\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"ShortAxis\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createAreaCalcEntity = (area) => {\n    const { unit, value } = area;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"99EPADA4\", \"99EPAD\", \"Area\")];\n    obj[\"description\"] = { value: \"Area\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Area\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createVolumeCalcEntity = (volume) => {\n    const { unit, value } = volume;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"RID28668\", \"Radlex\", \"Volume\")];\n    obj[\"description\"] = { value: \"Volume\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Volume\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMeanCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, mean } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-00317\", \"SRT\", \"Mean\"),\n    ];\n    obj[\"description\"] = { value: \"Mean\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Mean\", mean, preLabel)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection.CalculationEntity.push(\n      obj\n    );\n    return uId;\n  };\n\n  createStdDevCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, stdDev } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-10047\", \"SRT\", \"Standard Deviation\"),\n    ];\n    obj[\"description\"] = { value: \"Standard Deviation\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Standard Deviation\", stdDev, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMinCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, min } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-404FB\", \"SRT\", \"Minimum\"),\n    ];\n    obj[\"description\"] = { value: \"Minimum\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Minimum\", min, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMaxCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, max } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"G-A437\", \"SRT\", \"Maximum\"),\n    ];\n    obj[\"description\"] = { value: \"Maximum\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Maximum\", max, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  _getAimUnitAndDcmTypeCode = (unit) => {\n    if (unit === \"hu\")\n      return { unit: \"[hnsf'U]\", typeCodeDcm: this._createTypeCode() };\n    else if (unit === \"suv\")\n      return {\n        unit: \"{SUVbw}g/ml\",\n        typeCodeDcm: this._createTypeCode(126401, \"DCM\", \"SUVbw\"),\n      };\n    return { unit, typeCodeDcm: this._createTypeCode() };\n  };\n\n  createCommonCalcEntites = (mean, stdDev, min, max, preLabel) => {\n    var entities = [];\n    entities.push(this.createMeanCalcEntity(mean, preLabel));\n    entities.push(this.createStdDevCalcEntity(stdDev, preLabel));\n    entities.push(this.createMinCalcEntity(min, preLabel));\n    entities.push(this.createMaxCalcEntity(max, preLabel));\n    return entities;\n  };\n\n  // createLineCalcEntities = (length, mean, stdDev, min, max) => {\n  //   var entities = [];\n  //   entities.push(this.createLengthCalcEntity(length));\n  //   return entities.concat(\n  //     this.createCommonCalcEntites(mean, stdDev, min, max)\n  //   );\n  // };\n\n  createLongAxisCalcEntities = (longAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createLongAxisCalcEntity(longAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"LongAxis_\")\n    );\n  };\n\n  createShortAxisCalcEntities = (shortAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createShortAxisCalcEntity(shortAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"ShortAxis_\")\n    );\n  };\n\n  createCalculationEntityCollection = (entities) => {\n    var obj = {};\n    obj[\"calculationEntityCollection\"] = { CalculationEntity: entities };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Markup Entitiy Realted Functions        */\n  /*                                          */\n\n  _createCoordinate = (coordinate, index) => {\n    var obj = {};\n    obj[\"coordinateIndex\"] = { value: index };\n    obj[\"x\"] = { value: coordinate.x };\n    obj[\"y\"] = { value: coordinate.y };\n    return obj;\n  };\n\n  _createCoordinateArray = (points) => {\n    var coordinates = [];\n    points.forEach((point, index) => {\n      coordinates.push(this._createCoordinate(point, index));\n    });\n    return coordinates;\n  };\n\n  addMarkupEntity = (type, shapeIndex, points, imageUid, frameNum) => {\n    var obj = {};\n    obj[\"includeFlag\"] = { value: true };\n    obj[\"twoDimensionSpatialCoordinateCollection\"] = {\n      TwoDimensionSpatialCoordinate: this._createCoordinateArray(points),\n    };\n    const uId = generateUid();\n    obj[\"xsi:type\"] = type;\n    this.imageAnnotations.ImageAnnotation[0].markupEntityCollection.MarkupEntity.push(\n      obj\n    );\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"shapeIdentifier\"] = { value: shapeIndex };\n    obj[\"includeFlag\"] = { value: true };\n    obj[\"imageReferenceUid\"] = { root: imageUid };\n    obj[\"referencedFrameNumber\"] = { value: frameNum };\n    obj[\"twoDimensionSpatialCoordinateCollection\"] = {\n      TwoDimensionSpatialCoordinate: this._createCoordinateArray(points),\n    };\n    return uId;\n  };\n\n  /*                                          */\n  /*  Image Refrence Entity Collection        */\n  /*                                          */\n  _createModality = () => {\n    const sopClassUid = this.temp.image[0].sopClassUid;\n    if (sopClassUid && modalities[sopClassUid])\n      var {\n        codeValue,\n        codingSchemeDesignator,\n        codeMeaning,\n        codingSchemeVersion,\n      } = modalities[sopClassUid];\n    else {\n      const modality = this.temp.series.modality;\n      if (modality && modalities[modality]) {\n        var {\n          codeValue,\n          codingSchemeDesignator,\n          codeMeaning,\n          codingSchemeVersion,\n        } = modalities[modality];\n      }\n    }\n    var obj = {};\n    obj[\"code\"] = codeValue || \"\";\n    obj[\"codeSystemName\"] = codingSchemeDesignator || \"\";\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: codeMeaning || \"\",\n    };\n    obj[\"codeSystemVersion\"] = codingSchemeVersion || \"\";\n    return obj;\n  };\n\n  _createImageCollection = () => {\n    let obj = {};\n    obj[\"Image\"] = [];\n    this.temp.image.forEach((image) => {\n      let { sopClassUid, sopInstanceUid } = image;\n      sopClassUid = { root: sopClassUid };\n      sopInstanceUid = { root: sopInstanceUid };\n      obj[\"Image\"].push({ sopClassUid, sopInstanceUid });\n    });\n    return obj;\n  };\n\n  _createImageSeries = () => {\n    var obj = {};\n    obj[\"instanceUid\"] = { root: this.temp.series.instanceUid };\n    obj[\"modality\"] = this._createModality();\n    obj[\"imageCollection\"] = this._createImageCollection();\n    return obj;\n  };\n\n  _createImageStudy = () => {\n    const {\n      accessionNumber,\n      startTime,\n      instanceUid,\n      startDate,\n    } = this.temp.study;\n    var obj = {};\n    obj[\"instanceUid\"] = { root: instanceUid };\n    obj[\"startDate\"] = { value: startDate };\n    obj[\"startTime\"] = { value: startTime };\n    obj[\"accessionNumber\"] = { value: accessionNumber };\n    obj[\"imageSeries\"] = this._createImageSeries();\n    return obj;\n  };\n\n  _createImageReferenceEntity = () => {\n    var obj = {};\n    obj[\"xsi:type\"] = \"DicomImageReferenceEntity\";\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    obj[\"imageStudy\"] = this._createImageStudy();\n    return obj;\n  };\n\n  _createImageReferanceEntityCollection = () => {\n    var obj = {};\n    obj[\"ImageReferenceEntity\"] = [this._createImageReferenceEntity()];\n    return obj;\n  };\n\n  //\n  //\n  //\n  _createImageAnnotations = (aimType) => {\n    const {\n      name,\n      comment,\n      typeCode,\n      imagingPhysicalEntityCollection,\n      imagingObservationEntityCollection,\n      inferenceEntityCollection,\n    } = this.temp.aim;\n    var obj = {};\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    obj[\"typeCode\"] = typeCode;\n    obj[\"dateTime\"] = { value: this.getDate() };\n    obj[\"name\"] = name;\n    obj[\"comment\"] = this._getComment(comment);\n    obj[\"precedentReferencedAnnotationUid\"] = { root: \"\" };\n    if (imagingPhysicalEntityCollection)\n      obj[\"imagingPhysicalEntityCollection\"] = imagingPhysicalEntityCollection;\n    if (aimType === 1) {\n      //if this is an image annotation\n      obj[\"calculationEntityCollection\"] = { CalculationEntity: [] };\n      obj[\"markupEntityCollection\"] = { MarkupEntity: [] };\n      obj[\"imageAnnotationStatementCollection\"] = {\n        ImageAnnotationStatement: [],\n      };\n    }\n    if (imagingObservationEntityCollection)\n      obj[\n        \"imagingObservationEntityCollection\"\n      ] = imagingObservationEntityCollection;\n    if (inferenceEntityCollection)\n      obj[\"inferenceEntityCollection\"] = inferenceEntityCollection;\n    obj[\n      \"imageReferenceEntityCollection\"\n    ] = this._createImageReferanceEntityCollection();\n    return obj;\n  };\n\n  // sanity check to prevent failing for empty comment, but why do I have to send an object with .value?\n  _getComment = (comment) => {\n    if (comment && comment.value) {\n      if (comment.value.length)\n        comment.value = this._getProgrammedComment().concat(\n          \"~~\",\n          comment.value\n        );\n    } else comment.value = this._getProgrammedComment();\n    return comment;\n  };\n\n  _getProgrammedComment = () => {\n    const SEPERATOR = \" / \";\n    const { modality, description, instanceNumber, number } = this.temp.series;\n    const comment =\n      modality +\n      SEPERATOR +\n      description +\n      SEPERATOR +\n      instanceNumber +\n      SEPERATOR +\n      number;\n    return comment;\n  };\n\n  createImageAnnotationStatement = (referenceType, objectId, subjectId) => {\n    //this is called externally\n    var obj = {};\n    var references;\n    referenceType === 1\n      ? (references = \"CalculationEntityReferencesMarkupEntityStatement\")\n      : (references = \"CalculationEntityReferencesSegmentationEntityStatement\");\n    obj[\"xsi:type\"] = references;\n    obj[\"subjectUniqueIdentifier\"] = { root: subjectId };\n    obj[\"objectUniqueIdentifier\"] = { root: objectId };\n    this.imageAnnotations.ImageAnnotation[0].imageAnnotationStatementCollection.ImageAnnotationStatement.push(\n      obj\n    );\n  };\n\n  // createImageAnnotationStatementCollection = () => {\n  //   var obj = {};\n  //   obj[\"ImageAnnotationStatement\"] = [];\n  //   return obj;\n  // };\n\n  // //\n  // //\n  // // Image Annotations\n  // createImageAnnotation = (annotationStatementCollection = {}) => {\n  //   var obj = {};\n  //   obj[\"dateTime\"] = { value: this.getDate() };\n  //   obj[\n  //     \"imageAnnotationStatementCollection\"\n  //   ] = this.createImageAnnotationStatementCollection();\n  //   return obj;\n  // };\n\n  // createImageAnnotations = imageAnnotation => {\n  //   var obj = {};\n  //   obj[\"imageAnnotations\"] = imageAnnotation;\n  //   return obj;\n  // };\n\n  /*                                                */\n  /*    Segmentation Entitiy Realted Functions      */\n  /*                                                */\n\n  createSegmentationEntity = (segmentation) => {\n    var obj = {};\n    obj[\"referencedSopInstanceUid\"] = {\n      root: segmentation.referencedSopInstanceUid,\n    };\n    obj[\"segmentNumber\"] = { value: 1 };\n    obj[\"seriesInstanceUid\"] = {\n      root: segmentation.seriesInstanceUid,\n    };\n    obj[\"studyInstanceUid\"] = {\n      root: segmentation.studyInstanceUid,\n    };\n    obj[\"xsi:type\"] = \"DicomSegmentationEntity\";\n    obj[\"sopClassUid\"] = { root: \"1.2.840.10008.5.1.4.1.1.66.4\" };\n    obj[\"sopInstanceUid\"] = { root: segmentation.sopInstanceUid };\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    const imageAnnotation = this.imageAnnotations.ImageAnnotation[0];\n    if (!imageAnnotation.segmentationEntityCollection) {\n      imageAnnotation.segmentationEntityCollection = {};\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity = [];\n    }\n    imageAnnotation.segmentationEntityCollection.SegmentationEntity.push(obj);\n    return obj[\"uniqueIdentifier\"];\n  };\n\n  //\n  //\n  // Person\n  _createPerson = (person) => {\n    const { sex, name, patientId, birthDate } = person;\n    return {\n      name: { value: name },\n      id: { value: patientId },\n      birthDate: { value: birthDate },\n      sex: { value: sex },\n    };\n  };\n\n  //\n  //\n  // Eqipment\n  _createEquipment = (equipment) => {\n    const {\n      manufacturerName,\n      manufacturerModelName,\n      softwareVersion,\n    } = equipment;\n    return {\n      manufacturerName: { value: manufacturerName },\n      manufacturerModelName: { value: manufacturerModelName },\n      softwareVersion: { value: softwareVersion },\n    };\n  };\n\n  //\n  //\n  // User\n  _createUser = (user) => {\n    const { loginName, name } = user;\n    return {\n      name: { value: name },\n      loginName: { value: loginName },\n      name: { value: name },\n    };\n  };\n\n  getAim = () => {\n    delete this[\"temp\"];\n    const stringAim = JSON.stringify(this);\n    const wrappedAim = `{\"ImageAnnotationCollection\": ${stringAim} } `;\n    return wrappedAim;\n  };\n\n  // new method to get the aim json\n  getAimJSON = () => {\n    return JSON.parse(this.getAim());\n  };\n}\n\nexport default Aim;\n","import Aim from \"./Aim.jsx\";\nexport { Aim };\n\n// moved from aimEditor.jsx\nconst enumAimType = {\n  imageAnnotation: 1,\n  seriesAnnotation: 2,\n  studyAnnotation: 3,\n};\n\nexport function getImageIdAnnotations(aims) {\n  let imageIdSpecificMarkups = {};\n  try {\n    aims.forEach((aim) => parseAim(aim, imageIdSpecificMarkups));\n  } catch (err) {\n    console.log(\"Preparing ImageIdAnnotations\", err);\n  }\n  return imageIdSpecificMarkups;\n}\n\nfunction parseAim(aim, imageIdSpecificMarkups) {\n  var imageAnnotation =\n    aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0];\n  //check if the aim has markup\n  if (imageAnnotation.markupEntityCollection) {\n    var markupEntities = imageAnnotation.markupEntityCollection.MarkupEntity;\n    markupEntities.forEach((markupEntity) => {\n      const { imageId, data } = getMarkup(markupEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n  //check if it has segmentation\n  if (imageAnnotation.segmentationEntityCollection) {\n    var segmentationEntities =\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity;\n    segmentationEntities.forEach((segmentationEntity) => {\n      const { imageId, data } = getSegmentation(segmentationEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n}\n\nfunction getMarkup(markupEntity, aim) {\n  let imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  const frameNumber = markupEntity[\"referencedFrameNumber\"]\n    ? markupEntity[\"referencedFrameNumber\"][\"value\"]\n    : 1;\n  // if (frameNumber > -1) imageId = imageId + \"&frame=\" + frameNumber; //if multiframe reconstruct the imageId\n  imageId = imageId + \"&frame=\" + frameNumber;\n  const markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  let calculations = [];\n  try {\n    calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  } catch (error) {\n    console.log(\"Can not get calculations\", error);\n  }\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  return {\n    imageId,\n    data: {\n      markupType: markupEntity[\"xsi:type\"],\n      calculations,\n      coordinates:\n        markupEntity.twoDimensionSpatialCoordinateCollection\n          .TwoDimensionSpatialCoordinate,\n      markupUid,\n      aimUid,\n    },\n  };\n}\n\nfunction getSegmentation(segmentationEntity, aim) {\n  const imageId = segmentationEntity[\"referencedSopInstanceUid\"][\"root\"];\n  const markupUid = segmentationEntity[\"uniqueIdentifier\"][\"root\"];\n  let calculations = [];\n  try {\n    calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  } catch (error) {\n    console.log(\"Can not get calculations\", error);\n  }\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  return {\n    imageId,\n    data: {\n      markupType: segmentationEntity[\"xsi:type\"],\n      calculations,\n      markupUid,\n      aimUid,\n    },\n  };\n}\n\nfunction getCalculationEntitiesOfMarkUp(aim, markupUid) {\n  const imageAnnotationStatements = getImageAnnotationStatements(aim);\n  let calculations = [];\n  imageAnnotationStatements.forEach((statement) => {\n    if (statement.objectUniqueIdentifier.root === markupUid) {\n      const calculationUid = statement.subjectUniqueIdentifier.root;\n      const calculationEntities = getCalculationEntities(aim);\n      calculationEntities.forEach((calculation) => {\n        if (calculation.uniqueIdentifier.root === calculationUid)\n          calculations.push(parseCalculation(calculation));\n      });\n    }\n  });\n  return calculations;\n}\n\nfunction getImageAnnotationStatements(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .imageAnnotationStatementCollection.ImageAnnotationStatement;\n}\n\nfunction getCalculationEntities(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .calculationEntityCollection.CalculationEntity;\n}\n\nfunction parseCalculation(calculation) {\n  var obj = {};\n  const calcResult =\n    calculation.calculationResultCollection.CalculationResult[0];\n  if (\n    calculation.calculationResultCollection.CalculationResult[0]\n      .calculationDataCollection\n  ) {\n    const calcValue =\n      calculation.calculationResultCollection.CalculationResult[0]\n        .calculationDataCollection.CalculationData[0];\n    obj[\"value\"] = calcValue[\"value\"][\"value\"];\n  } else obj[\"value\"] = calcResult[\"value\"][\"value\"];\n  obj[\"type\"] = calculation[\"description\"][\"value\"];\n  obj[\"unit\"] = calcResult[\"unitOfMeasure\"][\"value\"];\n  return obj;\n}\n\nexport function getAimImageData(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n\n  aim.studyInstanceUid = image.data.string(\"x0020000d\") || \"\";\n\n  study.startTime = image.data.string(\"x00080030\") || \"\";\n  study.instanceUid = image.data.string(\"x0020000d\") || \"\";\n  study.startDate = image.data.string(\"x00080020\") || \"\";\n  study.accessionNumber = image.data.string(\"x00080050\") || \"\";\n\n  series.instanceUid = image.data.string(\"x0020000e\") || \"\";\n  series.modality = image.data.string(\"x00080060\") || \"\";\n  series.number = image.data.string(\"x00200011\") || \"\";\n  series.description = image.data.string(\"x0008103e\") || \"\";\n  series.instanceNumber = image.data.string(\"x00200013\") || \"\";\n\n  obj.image.push(getSingleImageData(image));\n\n  equipment.manufacturerName = image.data.string(\"x00080070\") || \"\";\n  equipment.manufacturerModelName = image.data.string(\"x00081090\") || \"\";\n  equipment.softwareVersion = image.data.string(\"x00181020\") || \"\";\n\n  person.sex = image.data.string(\"x00100040\") || \"\";\n  person.name = image.data.string(\"x00100010\") || \"\";\n  person.patientId = image.data.string(\"x00100020\") || \"\";\n  person.birthDate = image.data.string(\"x00100030\") || \"\";\n\n  return obj;\n}\n\nfunction getSingleImageData(image) {\n  return {\n    sopClassUid: image.data.string(\"x00080016\") || \"\",\n    sopInstanceUid: image.data.string(\"x00080018\") || \"\",\n  };\n}\n\nfunction addSingleImageDataToAim(aim, image) {\n  if (!aim.image) return;\n  aim.image.push(getSingleImageData(image));\n}\n\n// ---------- aimapi additional methods --------\n// new method inspired by createAimSegmentation in aimEditor.jsx\nexport function createOfflineAimSegmentation(segmentation, userInfo) {\n  // prapare the seed data and create aim\n  const seedData = getAimImageDataFromSeg(segmentation); //aimhelper\n  // admin/ upload user\n  addUserToSeedData(seedData, userInfo);\n  const aim = new Aim(seedData, enumAimType.imageAnnotation); // no this.updatedAimId.\n  // let dataset = await getDatasetFromBlob(segmentation);\n  // if update segmentation Uid should be same as the previous one\n  // console.log('Dataset series uid', segmentation);\n  // fill the segmentation related aim parts\n  const segEntityData = getSegmentationEntityDataFromSeg(segmentation);\n  // TODO fill in stats\n  addSegmentationToAim(aim, segEntityData, {});\n  // console.log('AIM in segmentation', aim);\n  // remove extra entities\n  delete aim.imageAnnotations.ImageAnnotation[0].calculationEntityCollection;\n  delete aim.imageAnnotations.ImageAnnotation[0].markupEntityCollection;\n  delete aim.imageAnnotations.ImageAnnotation[0]\n    .imageAnnotationStatementCollection;\n\n  // add name, comment and segmentation\n  aim.imageAnnotations.ImageAnnotation[0].name = {\n    value: segmentation.SeriesDescription,\n  };\n  // TODO there is no way to fill programmed comment without opening the source image\n  aim.imageAnnotations.ImageAnnotation[0].comment = { value: \"\" };\n  aim.imageAnnotations.ImageAnnotation[0].typeCode = [\n    {\n      code: \"SEG\",\n      codeSystemName: \"99EPAD\",\n      \"iso:displayName\": {\n        \"xmlns:iso\": \"uri:iso.org:21090\",\n        value: \"SEG Only\",\n      },\n    },\n  ];\n\n  return { aim };\n}\n// moved from aimEditor.jsx\nfunction addUserToSeedData(seedData, userInfo) {\n  // this is ui specific, should be changed\n  if (userInfo) {\n    seedData.user = userInfo;\n  } else {\n    let obj = {};\n    obj.loginName = sessionStorage.getItem(\"username\");\n    obj.name = sessionStorage.getItem(\"displayName\");\n    seedData.user = obj;\n  }\n}\n// moved from aimEditor.jsx\nfunction getDatasetFromBlob(segBlob, imageIdx) {\n  return new Promise((resolve) => {\n    let segArrayBuffer;\n    var fileReader = new FileReader();\n    fileReader.onload = (event) => {\n      segArrayBuffer = event.target.result;\n      const dicomData = dcmjs.data.DicomMessage.readFile(segArrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n      resolve(dataset);\n    };\n    fileReader.readAsArrayBuffer(segBlob);\n  });\n}\n// moved from aimEditor.jsx\nfunction addSegmentationToAim(aim, segEntityData, segStats) {\n  const segId = aim.createSegmentationEntity(segEntityData);\n  const { volume, min, max, mean, stdDev } = segStats;\n  if (mean) {\n    const meanId = aim.createMeanCalcEntity({ mean, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, meanId);\n  }\n  if (stdDev) {\n    const stdDevId = aim.createStdDevCalcEntity({ stdDev, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, stdDevId);\n  }\n  if (min) {\n    const minId = aim.createMinCalcEntity({ min, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, minId);\n  }\n  if (max) {\n    const maxId = aim.createMaxCalcEntity({ max, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, maxId);\n  }\n  if (volume) {\n    const volumeId = aim.createMaxCalcEntity({ volume, unit: \"mm3\" });\n    aim.createImageAnnotationStatement(2, segId, volumeId);\n  }\n}\n// new method inspired by moved getSegmentationEntityData from aimEditor.jsx\nfunction getSegmentationEntityDataFromSeg(dataset) {\n  const refImage = getRefImageFromSeg(dataset);\n  let obj = {};\n  obj[\"referencedSopInstanceUid\"] = refImage.ReferencedSOPInstanceUID;\n  obj[\"seriesInstanceUid\"] = dataset.SeriesInstanceUID;\n  obj[\"studyInstanceUid\"] = dataset.StudyInstanceUID;\n  obj[\"sopClassUid\"] = dataset.SOPClassUID;\n  obj[\"sopInstanceUid\"] = dataset.SOPInstanceUID;\n  return obj;\n}\n// new method to populate image data from segmentation dicom image\nfunction getAimImageDataFromSeg(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n  // seg data is coming in dcmjs format\n  aim.studyInstanceUid = image.StudyInstanceUID || \"\";\n  aim.comment = { value: \"\" };\n  study.startTime = image.StudyTime || \"\";\n  study.instanceUid = image.StudyInstanceUID || \"\";\n  study.startDate = image.StudyDate || \"\";\n  study.accessionNumber = image.AccessionNumber || \"\";\n  series.instanceUid = image.ReferencedSeriesSequence.SeriesInstanceUID || \"\";\n  obj.image.push(getSingleImageDataFromSeg(image));\n  equipment.manufacturerName = image.Manufacturer || \"\";\n  equipment.manufacturerModelName = image.ManufacturerModelName || \"\";\n  equipment.softwareVersion = image.SoftwareVersions || \"\";\n  person.sex = image.PatientSex || \"\";\n  person.name = image.PatientName || \"\";\n  person.patientId = image.PatientID || \"\";\n  person.birthDate = image.PatientBirthDate || \"\";\n  return obj;\n}\nfunction getRefImageFromSeg(dataset) {\n  // I needed to check if the sequence is array in each step as dcmjs makes it an object if there is only one item\n  let refImage = '';\n  const firstFrame = Array.isArray(dataset.PerFrameFunctionalGroupsSequence)\n    ? dataset.PerFrameFunctionalGroupsSequence[0]\n    : dataset.PerFrameFunctionalGroupsSequence;\n  if (firstFrame.DerivationImageSequence) {\n    const derivation = Array.isArray(firstFrame.DerivationImageSequence)\n      ? firstFrame.DerivationImageSequence[0]\n      : firstFrame.DerivationImageSequence;\n    refImage = Array.isArray(derivation.SourceImageSequence)\n      ? derivation.SourceImageSequence[0]\n      : derivation.SourceImageSequence;\n  } else if (dataset.ReferencedSeriesSequence) {\n    const refSeries = Array.isArray(dataset.ReferencedSeriesSequence)\n      ? dataset.ReferencedSeriesSequence[0]\n      : dataset.ReferencedSeriesSequence;\n    refImage = Array.isArray(refSeries.ReferencedInstanceSequence)\n      ? refSeries.ReferencedInstanceSequence[0]\n      : refSeries.ReferencedInstanceSequence;\n  }\n  return refImage;\n}\n\n// new method inspired by getSingleImageData to get data from segmentations\nfunction getSingleImageDataFromSeg(image) {\n  const refImage = getRefImageFromSeg(image);\n  return {\n    sopClassUid: refImage.ReferencedSOPClassUID || \"\",\n    sopInstanceUid: refImage.ReferencedSOPInstanceUID || \"\",\n  };\n}\n"],"names":["modalities","codeValue","codeMeaning","codingSchemeDesignator","codingSchemeVersion","CT","CR","PT","MR","US","MG","generateUid","uid","Math","floor","random","index","Aim","constructor","imageData","aimType","updatedAimId","now","Date","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","name","value","obj","label","size","Dimension","Object","assign","this","_createObject","dataType","code","codeSystem","unit","preLabel","_createDoubleDataType","_createDimension","codeSystemName","displayNameValue","length","uId","root","_createTypeCode","CalculationResult","_createCalcResult","imageAnnotations","ImageAnnotation","calculationEntityCollection","push","longAxis","shortAxis","area","volume","typeCodeDcm","mean","_getAimUnitAndDcmTypeCode","CalculationEntity","stdDev","min","max","entities","createMeanCalcEntity","createStdDevCalcEntity","createMinCalcEntity","createMaxCalcEntity","createLongAxisCalcEntity","concat","createCommonCalcEntites","createShortAxisCalcEntity","coordinate","x","y","points","coordinates","forEach","point","_createCoordinate","type","shapeIndex","imageUid","frameNum","TwoDimensionSpatialCoordinate","_createCoordinateArray","markupEntityCollection","MarkupEntity","sopClassUid","temp","image","modality","series","sopInstanceUid","instanceUid","_createModality","_createImageCollection","accessionNumber","startTime","startDate","study","_createImageSeries","_createImageStudy","_createImageReferenceEntity","comment","typeCode","imagingPhysicalEntityCollection","imagingObservationEntityCollection","inferenceEntityCollection","aim","_getComment","ImageAnnotationStatement","_createImageReferanceEntityCollection","_getProgrammedComment","description","instanceNumber","number","referenceType","objectId","subjectId","references","imageAnnotationStatementCollection","segmentation","referencedSopInstanceUid","seriesInstanceUid","studyInstanceUid","imageAnnotation","segmentationEntityCollection","SegmentationEntity","person","sex","patientId","birthDate","id","equipment","manufacturerName","manufacturerModelName","softwareVersion","user","loginName","JSON","stringify","parse","getAim","xmlns","aimConf","aimVersion","uniqueIdentifier","dateTime","_createUser","_createEquipment","_createPerson","_createImageAnnotations","undefined","data","enumAimType","getCalculationEntitiesOfMarkUp","markupUid","imageAnnotationStatements","ImageAnnotationCollection","getImageAnnotationStatements","calculations","statement","objectUniqueIdentifier","calculationUid","subjectUniqueIdentifier","getCalculationEntities","calculation","calcResult","calculationResultCollection","calculationDataCollection","calcValue","CalculationData","parseCalculation","getRefImageFromSeg","dataset","refImage","firstFrame","Array","isArray","PerFrameFunctionalGroupsSequence","DerivationImageSequence","derivation","SourceImageSequence","ReferencedSeriesSequence","refSeries","ReferencedInstanceSequence","userInfo","seedData","StudyInstanceUID","StudyTime","StudyDate","AccessionNumber","SeriesInstanceUID","ReferencedSOPClassUID","ReferencedSOPInstanceUID","getSingleImageDataFromSeg","Manufacturer","ManufacturerModelName","SoftwareVersions","PatientSex","PatientName","PatientID","PatientBirthDate","getAimImageDataFromSeg","sessionStorage","getItem","addUserToSeedData","segEntityData","segStats","segId","createSegmentationEntity","meanId","createImageAnnotationStatement","stdDevId","minId","maxId","volumeId","addSegmentationToAim","SOPClassUID","SOPInstanceUID","getSegmentationEntityDataFromSeg","SeriesDescription","string","getSingleImageData","aims","imageIdSpecificMarkups","markupEntity","imageId","frameNumber","error","console","log","aimUid","markupType","twoDimensionSpatialCoordinateCollection","getMarkup","segmentationEntity","getSegmentation","parseAim","err"],"mappings":"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"}